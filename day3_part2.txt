
Algorithm Explanation 
	1.	Start the program
The program begins by checking if the user has provided an input file. If not, it prints a usage message.

if (argc < 2) {
    printf("Usage: %s <input_file>\n", argv[0]);
    return 1;
}

	2.	Open the input file
The program attempts to open the file. If the file doesnâ€™t exist, it exits with an error message.

FILE *file = fopen(argv[1], "r");
if (!file) {
    printf("Could not open file %s\n", argv[1]);
    return 1;
}

    3.	Initialize variables
sum to keep track of the total sum of multiplications.
enabled to track whether mul() instructions should be counted (default is enabled).

long long sum = 0;
int enabled = 1; // Multiplications enabled by default


	4.	Read the file line by line
The program loops through each line of the file.

while (fgets(line, MAX_LINE, file)) {
    size_t len = strlen(line);
    for (size_t i = 0; i < len; i++) {
        ...
    }
}


	5.	Detect do() and don't() commands
If do() is found, it enables multiplication instructions.
If don't() is found, it disables multiplication instructions.

if (strncmp(&line[i], "do()", 4) == 0) {
    enabled = 1;
    i += 3;
} else if (strncmp(&line[i], "don't()", 7) == 0) {
    enabled = 0;
    i += 6;
}


	6.	Detect and process mul(X,Y) instructions
Parse the two numbers X and Y.
If multiplications are enabled, add X * Y to the sum.

else if (strncmp(&line[i], "mul(", 4) == 0) {
    i += 4;
    long long a = 0, b = 0;

    while (isdigit(line[i])) a = a * 10 + (line[i++] - '0');
    if (line[i++] != ',') continue;
    while (isdigit(line[i])) b = b * 10 + (line[i++] - '0');

    if (enabled) sum += a * b;
}


	7.	Close the file and print the result
Once all lines are processed, the program closes the file and prints the total sum.

fclose(file);
printf("%lld\n", sum);

Compilation and Execution
gcc day3_part2.c -o day3_part2

./day3_part2 day3_part1_input.txt

